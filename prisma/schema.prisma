datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  // directUrl = env("POSTGRES_URL_NON_POOLING")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  accounts              Account[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  roles                 UserRole[]
}

model Role {
  id    String     @id @default(cuid())
  name  String     @unique
  slug  String     @unique
  users UserRole[]
}

model UserRole {
  userId String
  roleId String
  user   User   @relation(fields: [userId], references: [id])
  role   Role   @relation(fields: [roleId], references: [id])

  @@id([userId, roleId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Category {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  slug        String  @unique
  description String?

  titleSeo       String?
  descriptionSeo String?
  keywordsSeo    String?

  isActive   Boolean @default(true)
  isFeatured Boolean @default(false)

  createdAt DateTime @default(now())

  statistics Statistique[]

  archivedStatistics Archived_Statistique[]
}

model RefreshCounter {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  slug      String   @unique
  value     Int      @default(0)
  createdAt DateTime @default(now())

  statistics Statistique[]
  archivedStatistics Archived_Statistique[]
}

model Statistique {
  id                           Int     @id @default(autoincrement())
  name                         String  @unique
  slug                         String  @unique
  stat_reference_previous_year Float
  has_starting_stat_to_add     Boolean @default(false)
  starting_stat_to_add         Float?
  comment                      String?

  sources Source[]

  isActive   Boolean @default(true)
  isStatic   Boolean @default(false)
  isPrice    Boolean @default(false)
  isFeatured Boolean @default(false)

  createdAt DateTime @default(now())

  yearId      Int?
  year        Year? @relation(fields: [yearId], references: [id], onDelete: SetNull)

  refreshId Int?
  refresh   RefreshCounter? @relation(fields: [refreshId], references: [id], onDelete: SetNull)

  categoryId Int
  category   Category @relation(fields: [categoryId], references: [id])
}


model Year {
  id    Int    @id @default(autoincrement())
  name  String
  value String

  statistics Statistique[]
  archivedStatistics Archived_Statistique[]
}

model Source {
  id            Int         @id @default(autoincrement())
  name          String
  url           String?
  description   String?
  statistiqueId Int
  statistique   Statistique @relation(fields: [statistiqueId], references: [id], onDelete: Cascade)

  archivedStatistiqueId Int?
  archivedStatistique   Archived_Statistique? @relation(fields: [archivedStatistiqueId], references: [id], onDelete: SetNull)

  createdAt     DateTime    @default(now())
}



model Archived_Statistique {
  id                           Int     @id @default(autoincrement())
  name                         String  @unique
  slug                         String  @unique
  stat_reference_previous_year Float
  has_starting_stat_to_add     Boolean @default(false)
  starting_stat_to_add         Float?
  comment                      String?

  sources Source[]

  isActive   Boolean @default(true)
  isStatic   Boolean @default(false)
  isPrice    Boolean @default(false)
  isFeatured Boolean @default(false)

  createdAt DateTime @default(now())

  yearId      Int?
  year        Year? @relation(fields: [yearId], references: [id], onDelete: SetNull)

  refreshId Int?
  refresh   RefreshCounter? @relation(fields: [refreshId], references: [id], onDelete: SetNull)

  categoryId Int
  category   Category @relation(fields: [categoryId], references: [id])
}


// petition, je récupère l'email de l'utilisateur et je lui envoie un mail pour confirmer son inscription
// une confirmation par email
// ou alors récupération d'ip, mais l'ip doit être hashée
model Petition {
  id        Int      @id @default(autoincrement())
  email     String
  firstName String
  lastName  String
  terms     Boolean
  ip        String
  createdAt DateTime @default(now())
}