datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // directUrl = env("DIRECT_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  accounts              Account[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  roles                 UserRole[]
}

model Role {
  id    String     @id @default(cuid())
  name  String     @unique
  slug  String     @unique
  users UserRole[]
}

model UserRole {
  userId String
  roleId String
  user   User   @relation(fields: [userId], references: [id])
  role   Role   @relation(fields: [roleId], references: [id])

  @@id([userId, roleId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Category {
  id          String  @id @default(cuid())
  name        String  @unique
  slug        String  @unique
  description String?

  titleSeo       String?
  descriptionSeo String?
  keywordsSeo    String?

  isActive   Boolean @default(true)
  isFeatured Boolean @default(false)

  createdAt DateTime @default(now())

  statistics Statistique[]
}

model RefreshCounter {
  id        String   @id @default(cuid())
  name      String   @unique
  slug      String   @unique
  value     Int      @default(0)
  createdAt DateTime @default(now())

  statistics Statistique[]
}

model Statistique {
  id                           String  @id @default(cuid())
  name                         String  @unique
  slug                         String  @unique
  stat_reference_previous_year Int?
  has_starting_stat_to_add     Boolean @default(false)
  starting_stat_to_add         Int?
  comment                      String?

  sources Source[]

  createdAt DateTime @default(now())

  refreshId String
  refresh   RefreshCounter @relation(fields: [refreshId], references: [id])

  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])
}

model Source {
  id            String      @id @default(cuid())
  url           String?
  description    String?
  statistiqueId String
  statistique   Statistique @relation(fields: [statistiqueId], references: [id])
  createdAt     DateTime    @default(now())
}
